[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 220: Intro to Data Science",
    "section": "",
    "text": "This page contains an outline of the topics, content, and assignments for the term. Note that this schedule will be updated as the term progresses and the timeline of topics and assignments might be updated. Any major changes to due dates will be announced in class and indicated in bold here.\n\n\n\n\n\n\nWEEK\nDOW\nDATE\nPREPARE\nTOPIC\nMATERIALS\nDUE\n\n\n\n1\nM\nMon, Jan 6\n📝complete welcome survey\n\nWelcome + data, R review\n\nslides01 01-example-unvotes\n\n\n\n\n1\nW\nWed, Jan 8\n📚 R basics  📚 R4DS 1e 27.1-27.4  📺 git and GitHub for poets  📝 Read syllabus and pass syllabus quiz to activate tokens\nGithub + reproducible reports\n\nslides02 02-reproducible-reports 02-lego-report\n\n\n\n\n1\nF\nFri, Jan 10\n📝 10 minute activity on markdown  📚 R4DS Ch1  📺 intro to ggplot\n\nggplot\n\nslides03 03-ggplot-intro and .rmd\n\nHW 1 (on moodle)\n\n\n2\nM\nMon, Jan 13\n📚 DataViz 17-21 \n\nTheming + Design\n\nslides04  04-customizing-plots .rmd\n\n\n\n\n2\nW\nWed, Jan 15\n📚 DataViz 15 \n\nMaps/spatial data\n\nslides05  05-maps .rmd\n\nHW 2\n\n\n2\nF\nFri, Jan 17\n📺 first 15 minutes of Accessible Data Science Beyond Visual Models  📚 Skim Writing Alt Text to Communicate the Meaning in Data Visualizations\n\nAccesibility for data viz\nslides06\n\n\n\n3\nM\nMon, Jan 20\n📚 R4DS 3.1-3.4 \n\nVerbs\n\nslides07 07-verbs\n\nPortfolio 1\n\n\n3\nW\nWed, Jan 22\n📚 R4DS 3.5  📚 R4DS 4 \n\nGroups and summarizing Code style\nslides08  08-group_by\nHW 3\n\n\n3\nF\nFri, Jan 24\n📚 R4DS 5.1-5.4  📚 R4DS 19.1-19.3\n\nTidy data/pivots and joins\n\nLab Quiz 1\n\n\n4\nM\nMon, Jan 27\n📚 R4DS 7.1-7.4  📚 R4DS 17.1-17.3 \n\nImport data and dates/times\n\n\n\n\n4\nW\nWed, Jan 29\n📚 R4DS 16 \n\nWorking with factors\n\nHW 4\n\n\n4\nF\nFri, Jan 31\n📚 R4DS 14  📚 R4DS 15.1-15.5\n\nWorking with strings and Regex\n\n\n\n\n5\nM\nMon, Feb 3\n📚 MDSR 19.2  🌎 Google ngram viewer\n\nText Analysis\n\nPortfolio 2\n\n\n5\nW\nWed, Feb 5\nTBA\nCatch up + Ethics II\n\nHW 5\n\n\n5\nF\nFri, Feb 7\nTBA\nTBA\n\nLab Quiz 2\n\n\n6\nM\nMon, Feb 10\n\n❌ Midterm Break; no class\n\n\n\n\n6\nW\nWed, Feb 12\n📚 R4DS 25\n\nFunctions\n\n\n\n\n6\nF\nFri, Feb 14\n📚 MDSR 7.1-7.3\n\nIteration\n\nHW6\n\n\n7\nM\nMon, Feb 17\n📚What is an API? 📝 work through tidycensus basic usage vignette (including signing up for a census API key!)\nAPIs\n\n\n\n\n7\nW\nWed, Feb 19\nTBA\nScraping\n\nHW7  Final Project Proposal\n\n\n7\nF\nFri, Feb 21\n\nEthics III\n\nLab Quiz 3\n\n\n8\nM\nMon, Feb 24\nTBA\nIntro to Interactivity\n\nPortfolio 3\n\n\n8\nW\nWed, Feb 26\nPick one:  📺 Shiny basics playlist  📚Ch 1-2 of Mastering Shiny\n\nShiny 1\n\nHW8\n\n\n8\nF\nFri, Feb 28\nPick one:  📺 Reactivity in shiny playlist  📚Ch 3 of Mastering Shiny\n\nShiny 2\n\n\n\n\n9\nM\nMon, Mar 3\n\nShiny 3\n\nFinal Project sketch draft\n\n\n9\nW\nWed, Mar 5\n📚MDSR 15.1-15.4\n\nSQL\n\n\n\n\n9\nF\nFri, Mar 7\n\nSQL\n\nPortfolio 4\n\n\n10\nM\nMon, Mar 10\n\nProject Demos\n\n\n\n\n10\nW\nWed, Mar 12\n\nProject Demos\n\nHW9",
    "crumbs": [
      "Course information",
      "Schedule"
    ]
  },
  {
    "objectID": "computing/r-basics-refresher.html",
    "href": "computing/r-basics-refresher.html",
    "title": "R Basics",
    "section": "",
    "text": "In your previous statistics course at Carleton, you likely loaded at least one add-on R package. In this course, we’ll use a lot of tools found in the tidyverse of R packages. To load many of these packages at once, you can use the library(&lt;package_name&gt;) command. So to load the tidyverse we run:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\nNote\n\n\n\nAbove we see a lot of extra info printed when we load the tidyverse. These messages are just telling you what packages are now available to you and warning you that a few functions (e.g., filter) has been replaced by the tidyverse version. We’ll see how to suppress these messages later."
  },
  {
    "objectID": "computing/r-basics-refresher.html#loading-r-packages",
    "href": "computing/r-basics-refresher.html#loading-r-packages",
    "title": "R Basics",
    "section": "",
    "text": "In your previous statistics course at Carleton, you likely loaded at least one add-on R package. In this course, we’ll use a lot of tools found in the tidyverse of R packages. To load many of these packages at once, you can use the library(&lt;package_name&gt;) command. So to load the tidyverse we run:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\nNote\n\n\n\nAbove we see a lot of extra info printed when we load the tidyverse. These messages are just telling you what packages are now available to you and warning you that a few functions (e.g., filter) has been replaced by the tidyverse version. We’ll see how to suppress these messages later."
  },
  {
    "objectID": "computing/r-basics-refresher.html#creating-and-naming-objects",
    "href": "computing/r-basics-refresher.html#creating-and-naming-objects",
    "title": "R Basics",
    "section": "Creating and naming objects",
    "text": "Creating and naming objects\nAll R statements where you create objects have the form:\n\nobject_name &lt;- value\n\nAt first, we’ll be creating a lot of data objects. For example, we an load a data set containing the ratings for each episode of The Office using the code\n\noffice_ratings &lt;- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-17/office_ratings.csv\")\n\nIn this class you will be creating a lot of objects, so you’ll need to come up with names for those objects. Trying to think of informative/meaningful names for objects is hard, but necessary work! Below are the fundamental rules for naming objects in R:\n\nnames can’t start with a number\nnames are case-sensitive\nsome common letters are used internally by R and should be avoided as variable names (c, q, t, C, D, F, T, I)\nThere are reserved words that R won’t let you use for variable names (for, in, while, if, else, repeat, break, next)\nR will let you use the name of a predefined function—but don’t do it!\n\nYou can always check to see if you the name you want to use is already taken via exists():\nFor example lm exists\n\nexists(\"lm\")\n\n[1] TRUE\n\n\nbut carleton_college doesn’t.\n\nexists(\"carleton_college\")\n\n[1] FALSE\n\n\nThere are also a lot of naming styles out there, and if you have coded in another language, you may have already developed a preference. Below is an illustration by Allison Horst\n\n\n\n\n\n\n\n\nI generally following the tidyverse style guide, so you’ll see that I use only lowercase letters, numbers, and _ (snake case)."
  },
  {
    "objectID": "computing/r-basics-refresher.html#overviews-of-data-frames",
    "href": "computing/r-basics-refresher.html#overviews-of-data-frames",
    "title": "R Basics",
    "section": "Overviews of data frames",
    "text": "Overviews of data frames\nAbove, you loaded in a data set called office_ratings. Data sets are stored as a special data structure called a data frame. Data frames are the most-commonly used data structure for data analysis in R. For now, think of them like spreadsheets.\nOnce you have your data frame, you can get a quick overview of it using a few commands (below I use data_set as a generic placeholder for the data frame’s name):\n\n\n\n\n\n\nCommand\nDescription\n\n\n\nhead(data_set)\nprint the first 6 rows\n\n\ntail(data_set)\nprint the last 6 rows\n\n\nglimpse(data_set)\na quick overview where columns run down the screen and the data values run across. This allows you to see every column in the data frame.\n\n\nstr(data_set)\na quick overview like glimpse(), but without some of the formatting\n\n\nsummary(data_set)\nquick summary statistics for each column\n\n\ndim(data_set)\nthe number of rows and columns\n\n\nnrow(data_set)\nthe number of rows\n\n\nncol(data_set)\nthe number of columns"
  },
  {
    "objectID": "computing/r-basics-refresher.html#tibbles",
    "href": "computing/r-basics-refresher.html#tibbles",
    "title": "R Basics",
    "section": "Tibbles",
    "text": "Tibbles\nA tibble, or a tbl_df is another version of a data frame which is used by default in a lot of the tidyverse packages that we’ll use.\n\nTibbles are data.frames that are lazy and surly: they do less (i.e. they don’t change variable names or types, and don’t do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects.\n\n\n\n\n\n\n\n Check point\n\n\n\nRun the above commands on the office_ratings data set. Compare and contrast the information returned by each command.\n\n\n\n\n\n\n\n\nGetting a spreadsheet\n\n\n\nIn RStudio, you can run the command View(data_set) to pull up a spreadsheet representation of a data frame. You can also click on the name of the data frame in the Environment pane. This can be a great way help you think about the data, and even has some interactive functions (e.g., filtering and searching); however, never include View(data_set) in an .Rmd file!!\n\n\n\n\n\n\n\n\nReview from intro stats\n\n\n\nIn intro stats we used the terms cases (or observations) and variables to describe the rows and columns of a data frame, respectively."
  },
  {
    "objectID": "computing/r-basics-refresher.html#extracting-pieces-of-data-frames",
    "href": "computing/r-basics-refresher.html#extracting-pieces-of-data-frames",
    "title": "R Basics",
    "section": "Extracting pieces of data frames",
    "text": "Extracting pieces of data frames\nSince data frames are the fundamental data structure for most analyses in R, it’s important to know how to work with them. You already know how to get an overview of a data frame, but that isn’t always very informative. Often, you want to extract pieces of a data frame, such as a specific column or row.\nExtracting rows\nData frames can be indexed by their row/column numbers. To extract elements of a data frame, the basic syntax is data_set[row.index, column.index]. So, to extract the 10th row of office_ratings we run\n\noffice_ratings[10, ]\n\n# A tibble: 1 × 6\n  season episode title    imdb_rating total_votes air_date  \n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;    \n1      2       4 The Fire         8.4        2713 2005-10-11\n\n\nNotice that to extract an entire row, we leave the column index position blank.\nWe can also extract multiple rows by creating a vector of row indices. For example, we can extract the first 5 rows via\n\noffice_ratings[1:5, ]\n\n# A tibble: 5 × 6\n  season episode title         imdb_rating total_votes air_date  \n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;    \n1      1       1 Pilot                 7.6        3706 2005-03-24\n2      1       2 Diversity Day         8.3        3566 2005-03-29\n3      1       3 Health Care           7.9        2983 2005-04-05\n4      1       4 The Alliance          8.1        2886 2005-04-12\n5      1       5 Basketball            8.4        3179 2005-04-19\n\n\nHere, 1:5 create a sequence of integers from 1 to 5.\nWe could also specify arbitrary row index values by combing the values into a vector. For example, we could extract the 1st, 13th, 64th, and 128th rows via\n\noffice_ratings[c(1, 13, 64, 128), ]\n\n# A tibble: 4 × 6\n  season episode title            imdb_rating total_votes air_date  \n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;    \n1      1       1 Pilot                    7.6        3706 2005-03-24\n2      2       7 The Client               8.6        2631 2005-11-08\n3      4      13 Job Fair                 7.9        1977 2008-05-08\n4      7      11 Classy Christmas         8.9        2138 2010-12-09\n\n\nExtracting columns\nSimilar to extracting rows, we can use a numeric index to extract the columns of a data frame. For example, to extract the 3rd column, we can run\n\noffice_ratings[,3]\n\n# A tibble: 188 × 1\n   title            \n   &lt;chr&gt;            \n 1 Pilot            \n 2 Diversity Day    \n 3 Health Care      \n 4 The Alliance     \n 5 Basketball       \n 6 Hot Girl         \n 7 The Dundies      \n 8 Sexual Harassment\n 9 Office Olympics  \n10 The Fire         \n# ℹ 178 more rows\n\n\nAlternatively, we can pass in the column name in quotes instead of the column number\n\noffice_ratings[,\"title\"]\n\n# A tibble: 188 × 1\n   title            \n   &lt;chr&gt;            \n 1 Pilot            \n 2 Diversity Day    \n 3 Health Care      \n 4 The Alliance     \n 5 Basketball       \n 6 Hot Girl         \n 7 The Dundies      \n 8 Sexual Harassment\n 9 Office Olympics  \n10 The Fire         \n# ℹ 178 more rows\n\n\nNotice that the extracted column is still formatted as a data frame (or tibble). If you want to extract the contents of the column and just have a vector of titles, you have a few options.\n\nYou could use double brackets with the column number:\n\n\noffice_ratings[[3]]\n\n\nYou could use double brackets with the column name in quotes:\n\n\noffice_ratings[[\"title\"]]\n\n\nYou could use the $ extractor with the column name (not in quotes):\n\n\noffice_ratings$title\n\n\n\n\n\n\n\n Check point\n\n\n\n\nExtract the 35th row of office_ratings.\nExtract rows 35, 36, 37, and 38 of office_ratings.\nExtract the imdb_rating column from office ratings using the column index number.\nExtract the imdb_rating column from office ratings using the column name."
  },
  {
    "objectID": "computing/r-basics-refresher.html#lists",
    "href": "computing/r-basics-refresher.html#lists",
    "title": "R Basics",
    "section": "Lists",
    "text": "Lists\nIt turns out that data frames are special cases of lists, a more general data structure. In a data frame, each column is an element of the data list and each column must be of the same length. In general, lists can be comprised of elements of vastly different lengths and data types.\nAs an example, let’s construct a list of the faculty in the MAST department and what is being taught this winter.\n\nstat_faculty &lt;- c(\"Kelling\", \"Loy\", \"Luby\", \"Poppick\", \"St. Clair\", \"Wadsworth\")\nstat_courses &lt;- c(120, 220, 230, 250, 285, 330)\nmath_faculty &lt;- c(\"Brooke\", \"Davis\", \"Egge\", \"Gomez-Gonzales\", \"Haunsperger\", \"Johnson\", \n                  \"Meyer\", \"Montee\", \"Shrestha\",\"Terry\", \"Thompson\", \"Turnage-Butterbaugh\")\nmath_courses &lt;- c(101, 106, 111, 120, 210, 211, 232, 236, 240, 241, 251, 321, 333, 395)\n\nmast &lt;- list(stat_faculty = stat_faculty, stat_courses = stat_courses, \n             math_faculty = math_faculty, math_courses = math_courses)\n\nOverview of a list\nYou can get an overview of a list a few ways:\n\n\nglimpse(list_name) and str(list_name) list the elements of the list and the first few entries of each element.\n\n\nglimpse(mast)\n\nList of 4\n $ stat_faculty: chr [1:6] \"Kelling\" \"Loy\" \"Luby\" \"Poppick\" ...\n $ stat_courses: num [1:6] 120 220 230 250 285 330\n $ math_faculty: chr [1:12] \"Brooke\" \"Davis\" \"Egge\" \"Gomez-Gonzales\" ...\n $ math_courses: num [1:14] 101 106 111 120 210 211 232 236 240 241 ...\n\n\n\n\nlength(list_name) will tell you how many elements are in the list\n\n\nlength(mast)\n\n[1] 4\n\n\nExtracting elements of a list\nSince data frames are lists, you’ve already seen how to extract elements of a list. For example, to extract the stat_faculty you could run\n\nmast[[1]]\n\n[1] \"Kelling\"   \"Loy\"       \"Luby\"      \"Poppick\"   \"St. Clair\" \"Wadsworth\"\n\n\nor\n\nmast[[\"stat_faculty\"]]\n\n[1] \"Kelling\"   \"Loy\"       \"Luby\"      \"Poppick\"   \"St. Clair\" \"Wadsworth\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you had only used a single bracket above, the returned object would still be a list, which is typically not what we would want.\n\nmast[1]\n\n$stat_faculty\n[1] \"Kelling\"   \"Loy\"       \"Luby\"      \"Poppick\"   \"St. Clair\" \"Wadsworth\"\n\n\n\n\n\n\n\n\n\n\n Check point\n\n\n\nExtract the statistics courses offered this term."
  },
  {
    "objectID": "computing/r-basics-refresher.html#vectors",
    "href": "computing/r-basics-refresher.html#vectors",
    "title": "R Basics",
    "section": "Vectors",
    "text": "Vectors\nThe columns of the office_ratings data frame and the elements of the mast list were comprised of (atomic) vectors. Unlike lists, all elements within a vector share the same type. For example, all names in the stat_faculty vector were character strings and all ratings in the imdb_rating column were numeric. We’ll deal with a variety of types of vectors in this course, including:\n\nnumeric\ncharacter (text)\nlogical (TRUE/FALSE)\n\nExtracting elements of a vector\nJust like with lists (and therefore data frames), we use brackets to extract elements from a vector. As an example, let’s work with the title column from office_ratings.\n\ntitle &lt;- office_ratings$title # vector of titles\n\nTo extract the 111th title, we run\n\ntitle[111]\n\n[1] \"New Leads\"\n\n\nor two extract the 100th through 111th titles, we run\n\ntitle[100:111]\n\n [1] \"Double Date\"          \"Murder\"               \"Shareholder Meeting\" \n [4] \"Scott's Tots\"         \"Secret Santa\"         \"The Banker\"          \n [7] \"Sabre\"                \"Manager and Salesman\" \"The Delivery: Part 1\"\n[10] \"The Delivery: Part 2\" \"St. Patrick's Day\"    \"New Leads\"           \n\n\nNegative indices\nSometimes, we want to “kick out” elements of our vector. To do this, we can use a negative index value. For example,\n\ntitle[-1]\n\nreturns all but the first title—that is, it kicks out the first title. To kick out multiple elements, we need to negate a vector of indices. For example, below we kick out the first 10 titles\n\ntitle[-c(1:10)]\n\nAnd now we kick out the 5th, 50th, and 150th titles\n\ntitle[-c(5, 50, 150)]\n\nThis idea can be adapted to lists and data frames. For example, to kick out the first row of office_ratings, we run\n\noffice_ratings[-1,]\n\n# A tibble: 187 × 6\n   season episode title             imdb_rating total_votes air_date  \n    &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                   &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;    \n 1      1       2 Diversity Day             8.3        3566 2005-03-29\n 2      1       3 Health Care               7.9        2983 2005-04-05\n 3      1       4 The Alliance              8.1        2886 2005-04-12\n 4      1       5 Basketball                8.4        3179 2005-04-19\n 5      1       6 Hot Girl                  7.8        2852 2005-04-26\n 6      2       1 The Dundies               8.7        3213 2005-09-20\n 7      2       2 Sexual Harassment         8.2        2736 2005-09-27\n 8      2       3 Office Olympics           8.4        2742 2005-10-04\n 9      2       4 The Fire                  8.4        2713 2005-10-11\n10      2       5 Halloween                 8.2        2561 2005-10-18\n# ℹ 177 more rows\n\n\nor to kick out the math courses from the mast list we run\n\nmast[-4]\n\n$stat_faculty\n[1] \"Kelling\"   \"Loy\"       \"Luby\"      \"Poppick\"   \"St. Clair\" \"Wadsworth\"\n\n$stat_courses\n[1] 120 220 230 250 285 330\n\n$math_faculty\n [1] \"Brooke\"              \"Davis\"               \"Egge\"               \n [4] \"Gomez-Gonzales\"      \"Haunsperger\"         \"Johnson\"            \n [7] \"Meyer\"               \"Montee\"              \"Shrestha\"           \n[10] \"Terry\"               \"Thompson\"            \"Turnage-Butterbaugh\"\n\n\nLogical indices\nIt’s great to be able to extract (or omit) elements using indices, but sometimes we don’t know what index value we should use. For example, if you wanted to extract all of the 300-level statistics courses from the stat_courses vector, you would need to manually determine that positions 2:5 meet that requirement. That’s a lot of work! A better alternative is to allow R to find the elements meeting that requirement using logical operators. Below is a table summarizing common logical operators in R.\n\n\nComparison\nMeaning\n\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n&lt;=\nless than or equal to\n\n\n&gt;=\ngreater than or equal to\n\n\n==\nis equal to\n\n\n!=\nnot equal to\n\n\n\nIn order to extract the 300-level statistics courses, we’ll take two steps:\n\nWe’ll determine whether each course is numbered at least 300,\nthen we’ll use that sequence of TRUEs/FALSEs to extract the course.\n\nSo, first we use the logical operator &gt;= to compare stat_courses and 300. This returns TRUE if the element meets the specification and FALSE otherwise.\n\nstat_courses &gt;= 300\n\n[1] FALSE FALSE FALSE FALSE FALSE  TRUE\n\n\nNow, we can use this vector as our index. Only the TRUE elements will be extracted:\n\nstat_courses[stat_courses &gt;= 300]\n\n[1] 330\n\n\nThe same idea can be used with data frames and lists, just remember how to format the brackets and indices!\n\n\n\n\n\n\n Check point\n\n\n\n\nExtract all statistics courses below 250 from stat_courses.\nExtract all math courses except for 240 (probability) from math_courses.\nExtract all rows from season 3 of The Office.\n\n\n\ns"
  },
  {
    "objectID": "slides/07/slides07.html#dplyr",
    "href": "slides/07/slides07.html#dplyr",
    "title": "Data Wrangling: Verbs",
    "section": "{dplyr}",
    "text": "{dplyr}\n\n\n\nA package that transforms data\nImplements a grammar of transforming tabular data\nPart of the tidyverse"
  },
  {
    "objectID": "slides/07/slides07.html#warm-up",
    "href": "slides/07/slides07.html#warm-up",
    "title": "Data Wrangling: Verbs",
    "section": "Warm up",
    "text": "Warm up\n\nWith your neighbors, identify the data verb (function) that does the following:\n\nPicks rows by their values\nReorders the rows\nPicks variables by their names\nCreates new variables with functions of existing variables\n\n\n\n\n\n−+\n02:30"
  },
  {
    "objectID": "slides/07/slides07.html#logical-tests",
    "href": "slides/07/slides07.html#logical-tests",
    "title": "Data Wrangling: Verbs",
    "section": "Logical tests",
    "text": "Logical tests\n\n\nFor help:\n?Comparison\n\n\n\n\nSyntax\nDescription\n\n\n\n\nx &lt; y\nless than\n\n\nx &gt; y\ngreater than\n\n\nx &lt;= y\nless than or equal to\n\n\nx &gt;= y\ngreater than or equal to\n\n\nx == y\nequal to\n\n\nx != y\nnot equal to\n\n\nx %in% y\ngroup membership\n\n\nis.na(x)\nis NA (missing)\n\n\n!is.na(x)\nis not NA"
  },
  {
    "objectID": "slides/07/slides07.html#your-turn",
    "href": "slides/07/slides07.html#your-turn",
    "title": "Data Wrangling: Verbs",
    "section": "Your turn:",
    "text": "Your turn:\n\nWith your neighbors, use filter() to wrangle the nycflights23::flights data frame.\n\nFind all flights that had an arrival delay of two or more hours.\nFind all flights to MSP\nFind all flights that arrived more than two hours late, but left less than one hour late\n(if time) Find all flights that were delayed by at least an hour, but made up over 30 minutes in flight.\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/07/slides07.html#slice.data-...",
    "href": "slides/07/slides07.html#slice.data-...",
    "title": "Data Wrangling: Verbs",
    "section": "slice(.data, ...)",
    "text": "slice(.data, ...)\nExtract (omit) rows by row number"
  },
  {
    "objectID": "slides/07/slides07.html#slicing-flights-data",
    "href": "slides/07/slides07.html#slicing-flights-data",
    "title": "Data Wrangling: Verbs",
    "section": "Slicing flights data",
    "text": "Slicing flights data\nExtracting rows 10 to 20\n\nslice(flights, 10:20)\n\n# A tibble: 11 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2023     1     1      547            545         2      845            852\n 2  2023     1     1      549            559       -10      905            901\n 3  2023     1     1      551            600        -9      846            859\n 4  2023     1     1      552            559        -7      857            911\n 5  2023     1     1      554            600        -6      914            920\n 6  2023     1     1      554            600        -6      725            735\n 7  2023     1     1      558            605        -7      719            750\n 8  2023     1     1      600            600         0      729            752\n 9  2023     1     1      600            600         0      745            755\n10  2023     1     1      600            600         0      810            840\n11  2023     1     1      603            605        -2      800            818\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/07/slides07.html#slicing-flights-data-1",
    "href": "slides/07/slides07.html#slicing-flights-data-1",
    "title": "Data Wrangling: Verbs",
    "section": "Slicing flights data",
    "text": "Slicing flights data\nOmitting rows 100 to 1000\n\nslice(flights, -c(100:1000))\n\n# A tibble: 434,451 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2023     1     1        1           2038       203      328              3\n 2  2023     1     1       18           2300        78      228            135\n 3  2023     1     1       31           2344        47      500            426\n 4  2023     1     1       33           2140       173      238           2352\n 5  2023     1     1       36           2048       228      223           2252\n 6  2023     1     1      503            500         3      808            815\n 7  2023     1     1      520            510        10      948            949\n 8  2023     1     1      524            530        -6      645            710\n 9  2023     1     1      537            520        17      926            818\n10  2023     1     1      547            545         2      845            852\n# ℹ 434,441 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/07/slides07.html#select",
    "href": "slides/07/slides07.html#select",
    "title": "Data Wrangling: Verbs",
    "section": "select()",
    "text": "select()\nExtract columns by name or number\n\nselect(.data, ...)\n\n\n\n\nSource: software carpentry"
  },
  {
    "objectID": "slides/07/slides07.html#storms-data",
    "href": "slides/07/slides07.html#storms-data",
    "title": "Data Wrangling: Verbs",
    "section": "Storms data",
    "text": "Storms data\n\nglimpse(storms)\n\nRows: 19,537\nColumns: 13\n$ name                         &lt;chr&gt; \"Amy\", \"Amy\", \"Amy\", \"Amy\", \"Amy\", \"Amy\",…\n$ year                         &lt;dbl&gt; 1975, 1975, 1975, 1975, 1975, 1975, 1975,…\n$ month                        &lt;dbl&gt; 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,…\n$ day                          &lt;int&gt; 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 2…\n$ hour                         &lt;dbl&gt; 0, 6, 12, 18, 0, 6, 12, 18, 0, 6, 12, 18,…\n$ lat                          &lt;dbl&gt; 27.5, 28.5, 29.5, 30.5, 31.5, 32.4, 33.3,…\n$ long                         &lt;dbl&gt; -79.0, -79.0, -79.0, -79.0, -78.8, -78.7,…\n$ status                       &lt;fct&gt; tropical depression, tropical depression,…\n$ category                     &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wind                         &lt;int&gt; 25, 25, 25, 25, 25, 25, 25, 30, 35, 40, 4…\n$ pressure                     &lt;int&gt; 1013, 1013, 1013, 1013, 1012, 1012, 1011,…\n$ tropicalstorm_force_diameter &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ hurricane_force_diameter     &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\n\n\nSubset of the NOAA Atlantic hurricane database best track data, https://www.nhc.noaa.gov/data/#hurda"
  },
  {
    "objectID": "slides/07/slides07.html#select-helpers",
    "href": "slides/07/slides07.html#select-helpers",
    "title": "Data Wrangling: Verbs",
    "section": "select() helpers",
    "text": "select() helpers\n\n:-starts_with()ends_with()contains()\n\n\nselect range of columns\n\nselect(storms, status:pressure)\n\n# A tibble: 19,537 × 4\n   status              category  wind pressure\n   &lt;fct&gt;                  &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n 1 tropical depression       NA    25     1013\n 2 tropical depression       NA    25     1013\n 3 tropical depression       NA    25     1013\n 4 tropical depression       NA    25     1013\n 5 tropical depression       NA    25     1012\n 6 tropical depression       NA    25     1012\n 7 tropical depression       NA    25     1011\n 8 tropical depression       NA    30     1006\n 9 tropical storm            NA    35     1004\n10 tropical storm            NA    40     1002\n# ℹ 19,527 more rows\n\n\n\n\nselect every column but\n\nselect(storms, -c(status, pressure))\n\n# A tibble: 19,537 × 11\n   name   year month   day  hour   lat  long category  wind\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 Amy    1975     6    27     0  27.5 -79         NA    25\n 2 Amy    1975     6    27     6  28.5 -79         NA    25\n 3 Amy    1975     6    27    12  29.5 -79         NA    25\n 4 Amy    1975     6    27    18  30.5 -79         NA    25\n 5 Amy    1975     6    28     0  31.5 -78.8       NA    25\n 6 Amy    1975     6    28     6  32.4 -78.7       NA    25\n 7 Amy    1975     6    28    12  33.3 -78         NA    25\n 8 Amy    1975     6    28    18  34   -77         NA    30\n 9 Amy    1975     6    29     0  34.4 -75.8       NA    35\n10 Amy    1975     6    29     6  34   -74.8       NA    40\n# ℹ 19,527 more rows\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;\n\n\n\n\nselect columns that start with…\n\nselect(storms, starts_with(\"w\"))\n\n# A tibble: 19,537 × 1\n    wind\n   &lt;int&gt;\n 1    25\n 2    25\n 3    25\n 4    25\n 5    25\n 6    25\n 7    25\n 8    30\n 9    35\n10    40\n# ℹ 19,527 more rows\n\n\n\n\nselect columns that end with…\n\nselect(storms, ends_with(\"e\"))\n\n# A tibble: 19,537 × 2\n   name  pressure\n   &lt;chr&gt;    &lt;int&gt;\n 1 Amy       1013\n 2 Amy       1013\n 3 Amy       1013\n 4 Amy       1013\n 5 Amy       1012\n 6 Amy       1012\n 7 Amy       1011\n 8 Amy       1006\n 9 Amy       1004\n10 Amy       1002\n# ℹ 19,527 more rows\n\n\n\n\nselect columns whose names contain…\n\nselect(storms, contains(\"d\"))\n\n# A tibble: 19,537 × 4\n     day  wind tropicalstorm_force_diameter hurricane_force_diameter\n   &lt;int&gt; &lt;int&gt;                        &lt;int&gt;                    &lt;int&gt;\n 1    27    25                           NA                       NA\n 2    27    25                           NA                       NA\n 3    27    25                           NA                       NA\n 4    27    25                           NA                       NA\n 5    28    25                           NA                       NA\n 6    28    25                           NA                       NA\n 7    28    25                           NA                       NA\n 8    28    30                           NA                       NA\n 9    29    35                           NA                       NA\n10    29    40                           NA                       NA\n# ℹ 19,527 more rows"
  },
  {
    "objectID": "slides/07/slides07.html#try-it",
    "href": "slides/07/slides07.html#try-it",
    "title": "Data Wrangling: Verbs",
    "section": "Try it:",
    "text": "Try it:\n\nBrainstorm as many ways as possible to select() the following columns from flight:\n\ndep_time\ndep_delay\narr_time\narr_delay\n\n\n\n\n\n−+\n02:00"
  },
  {
    "objectID": "slides/07/slides07.html#arrange",
    "href": "slides/07/slides07.html#arrange",
    "title": "Data Wrangling: Verbs",
    "section": "arrange()",
    "text": "arrange()\nOrder rows from smallest to largest"
  },
  {
    "objectID": "slides/07/slides07.html#arranging-by-wind-speed",
    "href": "slides/07/slides07.html#arranging-by-wind-speed",
    "title": "Data Wrangling: Verbs",
    "section": "Arranging by wind speed",
    "text": "Arranging by wind speed\nBy default, arrange orders in ascending order\n\nOriginal DataAscendingDescending\n\n\n\nstorms\n\n# A tibble: 19,537 × 13\n   name   year month   day  hour   lat  long status      category  wind pressure\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;          &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n 1 Amy    1975     6    27     0  27.5 -79   tropical d…       NA    25     1013\n 2 Amy    1975     6    27     6  28.5 -79   tropical d…       NA    25     1013\n 3 Amy    1975     6    27    12  29.5 -79   tropical d…       NA    25     1013\n 4 Amy    1975     6    27    18  30.5 -79   tropical d…       NA    25     1013\n 5 Amy    1975     6    28     0  31.5 -78.8 tropical d…       NA    25     1012\n 6 Amy    1975     6    28     6  32.4 -78.7 tropical d…       NA    25     1012\n 7 Amy    1975     6    28    12  33.3 -78   tropical d…       NA    25     1011\n 8 Amy    1975     6    28    18  34   -77   tropical d…       NA    30     1006\n 9 Amy    1975     6    29     0  34.4 -75.8 tropical s…       NA    35     1004\n10 Amy    1975     6    29     6  34   -74.8 tropical s…       NA    40     1002\n# ℹ 19,527 more rows\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;\n\n\n\n\n\narrange(storms, wind)\n\n# A tibble: 19,537 × 13\n   name      year month   day  hour   lat  long status   category  wind pressure\n   &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n 1 Bonnie    1986     6    28     6  36.5 -91.3 tropica…       NA    10     1013\n 2 Bonnie    1986     6    28    12  37.2 -90   tropica…       NA    10     1012\n 3 Charley   1986     8    13    12  30.1 -84   subtrop…       NA    10     1009\n 4 Charley   1986     8    13    18  30.8 -84   subtrop…       NA    10     1012\n 5 Charley   1986     8    14     0  31.4 -83.6 subtrop…       NA    10     1013\n 6 Charley   1986     8    14     6  32   -83.1 subtrop…       NA    10     1014\n 7 Charley   1986     8    14    12  32.5 -82.5 subtrop…       NA    10     1015\n 8 Charley   1986     8    14    18  32.4 -82   subtrop…       NA    10     1015\n 9 AL031987  1987     8    16    18  30.9 -83.2 tropica…       NA    10     1014\n10 AL031987  1987     8    17     0  31.4 -82.9 tropica…       NA    10     1015\n# ℹ 19,527 more rows\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;\n\n\n\n\n\narrange(storms, desc(wind))\n\n# A tibble: 19,537 × 13\n   name     year month   day  hour   lat  long status    category  wind pressure\n   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;        &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n 1 Allen    1980     8     7    18  21.8 -86.4 hurricane        5   165      899\n 2 Gilbert  1988     9    14     0  19.7 -83.8 hurricane        5   160      888\n 3 Wilma    2005    10    19    12  17.3 -82.8 hurricane        5   160      882\n 4 Dorian   2019     9     1    16  26.5 -77   hurricane        5   160      910\n 5 Dorian   2019     9     1    18  26.5 -77.1 hurricane        5   160      910\n 6 Allen    1980     8     5    12  15.9 -70.5 hurricane        5   155      932\n 7 Allen    1980     8     7    12  21   -84.8 hurricane        5   155      910\n 8 Allen    1980     8     8     0  22.2 -87.9 hurricane        5   155      920\n 9 Allen    1980     8     9     6  25   -94.2 hurricane        5   155      909\n10 Gilbert  1988     9    14     6  19.9 -85.3 hurricane        5   155      889\n# ℹ 19,527 more rows\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "slides/07/slides07.html#try-it-1",
    "href": "slides/07/slides07.html#try-it-1",
    "title": "Data Wrangling: Verbs",
    "section": "Try it:",
    "text": "Try it:\n\nUse arrange to answer the following questions:\n\nWhich flights traveled the farthest?\nWhich traveled the shortest?\nWhich flights lasted the longest?\nWhich lasted the shortest?\n\n\n\n\n\n−+\n02:30"
  },
  {
    "objectID": "slides/07/slides07.html#section-3",
    "href": "slides/07/slides07.html#section-3",
    "title": "Data Wrangling: Verbs",
    "section": "",
    "text": "slice_min(.data, order_by, n)\nselect rows with n smallest values of a variable\nslice_max(.data, order_by, n)\nselect rows with n largest values of a variable"
  },
  {
    "objectID": "slides/07/slides07.html#continuing-storms-example",
    "href": "slides/07/slides07.html#continuing-storms-example",
    "title": "Data Wrangling: Verbs",
    "section": "Continuing storms example",
    "text": "Continuing storms example\n\nslice_maxslice_min\n\n\nExtracting storms with 3 highest wind speeds\n\nslice_max(storms, wind, n = 3)\n\n# A tibble: 5 × 13\n  name     year month   day  hour   lat  long status    category  wind pressure\n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;        &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1 Allen    1980     8     7    18  21.8 -86.4 hurricane        5   165      899\n2 Gilbert  1988     9    14     0  19.7 -83.8 hurricane        5   160      888\n3 Wilma    2005    10    19    12  17.3 -82.8 hurricane        5   160      882\n4 Dorian   2019     9     1    16  26.5 -77   hurricane        5   160      910\n5 Dorian   2019     9     1    18  26.5 -77.1 hurricane        5   160      910\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;\n\n\n\n\nExtracting storms with the lowest wind speed\n\nslice_min(storms, wind, n = 1)\n\n# A tibble: 61 × 13\n   name      year month   day  hour   lat  long status   category  wind pressure\n   &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n 1 Bonnie    1986     6    28     6  36.5 -91.3 tropica…       NA    10     1013\n 2 Bonnie    1986     6    28    12  37.2 -90   tropica…       NA    10     1012\n 3 Charley   1986     8    13    12  30.1 -84   subtrop…       NA    10     1009\n 4 Charley   1986     8    13    18  30.8 -84   subtrop…       NA    10     1012\n 5 Charley   1986     8    14     0  31.4 -83.6 subtrop…       NA    10     1013\n 6 Charley   1986     8    14     6  32   -83.1 subtrop…       NA    10     1014\n 7 Charley   1986     8    14    12  32.5 -82.5 subtrop…       NA    10     1015\n 8 Charley   1986     8    14    18  32.4 -82   subtrop…       NA    10     1015\n 9 AL031987  1987     8    16    18  30.9 -83.2 tropica…       NA    10     1014\n10 AL031987  1987     8    17     0  31.4 -82.9 tropica…       NA    10     1015\n# ℹ 51 more rows\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "slides/07/slides07.html#star-wars-character-bmi",
    "href": "slides/07/slides07.html#star-wars-character-bmi",
    "title": "Data Wrangling: Verbs",
    "section": "Star Wars character BMI",
    "text": "Star Wars character BMI\n{dplyr} includes a starwars data frame with characteristics of 87 Star Wars characters\n\nglimpse(starwars)\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…"
  },
  {
    "objectID": "slides/07/slides07.html#star-wars-character-bmi-1",
    "href": "slides/07/slides07.html#star-wars-character-bmi-1",
    "title": "Data Wrangling: Verbs",
    "section": "Star Wars character BMI",
    "text": "Star Wars character BMI\nSuppose we want to calculate the BMI for each character, \\(\\text{BMI} = \\dfrac{\\text{mass (kg)}}{\\text{height (m)}^2}\\)\n\nstarwars &lt;- mutate(starwars, bmi = mass / (height / 100)^2)\n\n\nselect(starwars, name, bmi, everything())\n\n# A tibble: 87 × 15\n   name        bmi height  mass hair_color skin_color eye_color birth_year sex  \n   &lt;chr&gt;     &lt;dbl&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;\n 1 Luke Sky…  26.0    172    77 blond      fair       blue            19   male \n 2 C-3PO      26.9    167    75 &lt;NA&gt;       gold       yellow         112   none \n 3 R2-D2      34.7     96    32 &lt;NA&gt;       white, bl… red             33   none \n 4 Darth Va…  33.3    202   136 none       white      yellow          41.9 male \n 5 Leia Org…  21.8    150    49 brown      light      brown           19   fema…\n 6 Owen Lars  37.9    178   120 brown, gr… light      blue            52   male \n 7 Beru Whi…  27.5    165    75 brown      light      blue            47   fema…\n 8 R5-D4      34.0     97    32 &lt;NA&gt;       white, red red             NA   none \n 9 Biggs Da…  25.1    183    84 black      light      brown           24   male \n10 Obi-Wan …  23.2    182    77 auburn, w… fair       blue-gray       57   male \n# ℹ 77 more rows\n# ℹ 6 more variables: gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;,\n#   films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;"
  },
  {
    "objectID": "slides/07/slides07.html#try-it-2",
    "href": "slides/07/slides07.html#try-it-2",
    "title": "Data Wrangling: Verbs",
    "section": "Try it",
    "text": "Try it\n\nCreate a new column in flights giving the average speed of the flight while it was in the air. What are the units of this variable? Make the variable in terms of miles per hour.\n\n\n\n\n−+\n02:30"
  },
  {
    "objectID": "slides/07/slides07.html#example",
    "href": "slides/07/slides07.html#example",
    "title": "Data Wrangling: Verbs",
    "section": "Example",
    "text": "Example\nThe Federal Aviation Administration (FAA) considers a flight to be delayed when it is 15 minutes later than its scheduled time.\n\nflights &lt;- mutate(\n  flights, \n  delayed = case_when(\n    dep_delay &gt;= 15 ~ \"Delayed\", \n    dep_delay &lt; 15 ~ \"On time\",\n    .default = \"other\")\n)"
  },
  {
    "objectID": "slides/07/slides07.html#your-turn-1",
    "href": "slides/07/slides07.html#your-turn-1",
    "title": "Data Wrangling: Verbs",
    "section": "Your turn",
    "text": "Your turn\n\nSuppose that you don’t think the FAA gives enough information in their definition of a delayed flight, so you come up with the following delay categories:\n\ndep_delay &lt;= 0 -&gt; none\ndep_delay between 1 and 15 minutes -&gt; minimal\ndep_delay between 16 and 30 minutes -&gt; delayed\ndep_delay between 31 and 60 minutes -&gt; major\ndep_delay over 60 minutes -&gt; extreme\n\nUse mutate() and case_when() to create a delay_category variable in the flights data frame."
  },
  {
    "objectID": "slides/07/slides07.html#section-7",
    "href": "slides/07/slides07.html#section-7",
    "title": "Data Wrangling: Verbs",
    "section": "",
    "text": "“dataframe first, dataframe once”\nCombine multiple operations with the pipe\nThink “and then” when reading code"
  },
  {
    "objectID": "slides/07/slides07.html#using",
    "href": "slides/07/slides07.html#using",
    "title": "Data Wrangling: Verbs",
    "section": "Using %>%",
    "text": "Using %&gt;%\n\n%&gt;% passes result on left into first argument of function on right\nChaining functions together lets you read Left-to-right, top-to-bottom"
  },
  {
    "objectID": "slides/07/slides07.html#using-1",
    "href": "slides/07/slides07.html#using-1",
    "title": "Data Wrangling: Verbs",
    "section": "Using %>%",
    "text": "Using %&gt;%\n\n\nfilter():\n\nfilter(storms, status == \"hurricane\")\n\nbecomes\n\nstorms %&gt;%\n  filter(status == \"hurricane\")\n\n\narrange():\n\narrange(storms, wind)\n\nbecomes\n\nstorms %&gt;%\n  arrange(wind)"
  },
  {
    "objectID": "slides/07/slides07.html#using-2",
    "href": "slides/07/slides07.html#using-2",
    "title": "Data Wrangling: Verbs",
    "section": "Using %>%",
    "text": "Using %&gt;%\nWe can also build up a series of pipes.\nWe’re interested in the storms with the lowest wind speed that were still classified as hurricanes.\n\nstorms %&gt;%\n  filter(status == \"hurricane\") %&gt;%\n  arrange(wind)\n\n# A tibble: 4,803 × 13\n   name      year month   day  hour   lat  long status   category  wind pressure\n   &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n 1 Blanche   1975     7    27     6  35.9 -70   hurrica…        1    65      987\n 2 Caroline  1975     8    30     0  23.3 -94.2 hurrica…        1    65      990\n 3 Caroline  1975     8    30     6  23.5 -94.9 hurrica…        1    65      990\n 4 Caroline  1975     8    30    12  23.7 -95.6 hurrica…        1    65      989\n 5 Doris     1975     8    31     0  34.9 -46.3 hurrica…        1    65      990\n 6 Doris     1975     8    31     6  34.8 -45.7 hurrica…        1    65      990\n 7 Eloise    1975     9    16    18  19.5 -68.4 hurrica…        1    65     1002\n 8 Eloise    1975     9    17     0  19.6 -69.2 hurrica…        1    65      997\n 9 Eloise    1975     9    22     6  24.8 -89.4 hurrica…        1    65      993\n10 Faye      1975     9    26     0  26.5 -60   hurrica…        1    65      990\n# ℹ 4,793 more rows\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "slides/07/slides07.html#using-3",
    "href": "slides/07/slides07.html#using-3",
    "title": "Data Wrangling: Verbs",
    "section": "Using %>%",
    "text": "Using %&gt;%\nWe’re interested in the storms with the lowest wind speed that were still classified as hurricanes, that reached category 2.\n\nstorms %&gt;%\n  filter(status == \"hurricane\") %&gt;%\n  filter(category &gt; 1) %&gt;%\n  arrange(wind)\n\n# A tibble: 2,255 × 13\n   name    year month   day  hour   lat  long status    category  wind pressure\n   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;        &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n 1 Eloise  1975     9    22    18  26.5 -89.4 hurricane        2    85      980\n 2 Faye    1975     9    26    18  31   -63.1 hurricane        2    85      985\n 3 Faye    1975     9    28     0  38.4 -63.7 hurricane        2    85      985\n 4 Gladys  1975    10     3     6  43.7 -57   hurricane        2    85      960\n 5 Gladys  1975    10     3    12  46.6 -50.6 hurricane        2    85      960\n 6 Emmy    1976     8    26    18  27.7 -54.8 hurricane        2    85      976\n 7 Emmy    1976     8    27    12  30.9 -53.7 hurricane        2    85      975\n 8 Emmy    1976     8    28    12  33.5 -56.6 hurricane        2    85      975\n 9 Emmy    1976     8    31    12  35.1 -44.9 hurricane        2    85      977\n10 Gloria  1976     9    30     6  32.2 -59.8 hurricane        2    85      971\n# ℹ 2,245 more rows\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "slides/07/slides07.html#combining-with-ggplot",
    "href": "slides/07/slides07.html#combining-with-ggplot",
    "title": "Data Wrangling: Verbs",
    "section": "Combining with ggplot",
    "text": "Combining with ggplot\nPipes become especially useful when we combine them with ggplot():\n\n\nstorms %&gt;%\n  filter(status == \"hurricane\") %&gt;%\n  filter(category &gt; 1) %&gt;%\n  ggplot(aes(x = wind, y = hurricane_force_diameter)) + \n  geom_jitter()"
  },
  {
    "objectID": "slides/07/slides07.html#your-turn-2",
    "href": "slides/07/slides07.html#your-turn-2",
    "title": "Data Wrangling: Verbs",
    "section": "Your turn",
    "text": "Your turn\n\nChain the last two parts together, so that the resulting dataset contains both avg_speed and delay_category. Pipe this new dataset into ggplot() to answer the question “is there a relationship between average speed and how late a flight is delayed?”\nIf you have time, create a new graph which only contains flights to MSP.\n\n\n\n\n−+\n04:00"
  },
  {
    "objectID": "slides/06/slides06.html#today",
    "href": "slides/06/slides06.html#today",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Today",
    "text": "Today\n\n{patchwork}\nColorblind-friendly color palettes\nWriting alt-text"
  },
  {
    "objectID": "slides/06/slides06.html#small-multiples",
    "href": "slides/06/slides06.html#small-multiples",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Small Multiples",
    "text": "Small Multiples\nEach plot shares aesthetics but shows different subsets of data"
  },
  {
    "objectID": "slides/06/slides06.html#compound-plots",
    "href": "slides/06/slides06.html#compound-plots",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Compound Plots",
    "text": "Compound Plots\nThe plots might share data, but don’t share aesthetics"
  },
  {
    "objectID": "slides/06/slides06.html#compound-plot-example",
    "href": "slides/06/slides06.html#compound-plot-example",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Compound Plot Example",
    "text": "Compound Plot Example\n\nlibrary(palmerpenguins)\nggplot(penguins) + \n  geom_histogram(bins = 20, col = \"white\", aes(x = body_mass_g))\n\n\n\n\n\n\n\nggplot(penguins) + \n  geom_histogram(bins = 20, col = \"white\", aes(x = flipper_length_mm))\n\n\n\n\n\n\n\nggplot(penguins) + \n  geom_point(aes(x = body_mass_g, y = flipper_length_mm))"
  },
  {
    "objectID": "slides/06/slides06.html#patchwork",
    "href": "slides/06/slides06.html#patchwork",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Patchwork",
    "text": "Patchwork\n\nlibrary(patchwork)\np1 = ggplot(penguins) + \n  geom_histogram(bins = 20, col = \"white\", aes(x = body_mass_g))\n\np2 = ggplot(penguins) + \n  geom_histogram(bins = 20, col = \"white\", aes(x = flipper_length_mm))\n\np3 = ggplot(penguins) + \n  geom_point(aes(x = body_mass_g, y = flipper_length_mm))\n\n(p1 + p2)/p3"
  },
  {
    "objectID": "slides/06/slides06.html#patchwork-layout-2",
    "href": "slides/06/slides06.html#patchwork-layout-2",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Patchwork (layout 2)",
    "text": "Patchwork (layout 2)\n\np3 + (p1/p2)\n\n\n\n\n\n\n\n\n\n\nFor more complex layouts, see the “Controlling Layouts” vignette"
  },
  {
    "objectID": "slides/06/slides06.html#patchwork-with-a-shared-legend",
    "href": "slides/06/slides06.html#patchwork-with-a-shared-legend",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Patchwork (with a shared legend)",
    "text": "Patchwork (with a shared legend)\n\np1 = ggplot(penguins) + \n  geom_histogram(bins = 20, col = \"white\", aes(x = body_mass_g, fill = species))\n\np2 = ggplot(penguins) + \n  geom_histogram(bins = 20,  col = \"white\", aes(x = flipper_length_mm, fill = species))\n\np3 = ggplot(penguins) + \n  geom_point(pch = 21, alpha = .9, col = \"white\", aes(x = body_mass_g, y = flipper_length_mm, fill = species)) +\n  theme(legend.position = \"none\")\n\np3 + (p1/p2) + \n  plot_layout(guides = 'collect')"
  },
  {
    "objectID": "slides/06/slides06.html#patchwork-with-annotation",
    "href": "slides/06/slides06.html#patchwork-with-annotation",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Patchwork (with annotation)",
    "text": "Patchwork (with annotation)\n\np3 + (p1/p2) + \n  plot_layout(guides = 'collect') + \n  plot_annotation(\n    title = \"Penguin Plot\",\n    tag_levels = \"A\"\n  )"
  },
  {
    "objectID": "slides/06/slides06.html#patchwork-with-a-common-theme",
    "href": "slides/06/slides06.html#patchwork-with-a-common-theme",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Patchwork (with a common theme)",
    "text": "Patchwork (with a common theme)\n\np3 + (p1/p2) + \n  plot_layout(guides = 'collect') & \n  theme_minimal() &\n  scale_fill_viridis_d()"
  },
  {
    "objectID": "slides/06/slides06.html#but-what-does-this-have-to-do-with-accessibility",
    "href": "slides/06/slides06.html#but-what-does-this-have-to-do-with-accessibility",
    "title": "(Closer to) Accessible Data Viz",
    "section": "But what does this have to do with accessibility?",
    "text": "But what does this have to do with accessibility?\n\nOutput (knitted files, slides, websites, etc.) should be designed to make it as easy as possible for the user to understand your content\nThere’s a cognitive load involved with scrolling or turning a physical page and trying to remember a visual from the previous page\nWhen plots belong together, we should put them together"
  },
  {
    "objectID": "slides/06/slides06.html#color-scales",
    "href": "slides/06/slides06.html#color-scales",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Color scales",
    "text": "Color scales\nUse colorblind friendly color scales (e.g., Okabe Ito, viridis)"
  },
  {
    "objectID": "slides/06/slides06.html#section-1",
    "href": "slides/06/slides06.html#section-1",
    "title": "(Closer to) Accessible Data Viz",
    "section": "",
    "text": "colorBlindness::displayAllColors(scales::hue_pal()(10))"
  },
  {
    "objectID": "slides/06/slides06.html#section-2",
    "href": "slides/06/slides06.html#section-2",
    "title": "(Closer to) Accessible Data Viz",
    "section": "",
    "text": "colorBlindness::displayAllColors(rainbow(10))"
  },
  {
    "objectID": "slides/06/slides06.html#section-3",
    "href": "slides/06/slides06.html#section-3",
    "title": "(Closer to) Accessible Data Viz",
    "section": "",
    "text": "colorBlindness::displayAllColors(colorblindr::palette_OkabeIto)"
  },
  {
    "objectID": "slides/06/slides06.html#section-4",
    "href": "slides/06/slides06.html#section-4",
    "title": "(Closer to) Accessible Data Viz",
    "section": "",
    "text": "colorBlindness::displayAllColors(viridisLite::viridis(10))"
  },
  {
    "objectID": "slides/06/slides06.html#double-encoding",
    "href": "slides/06/slides06.html#double-encoding",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Double encoding",
    "text": "Double encoding\nUse shape and color where possible\n\n\n\nDefault ggplot2 scale\n\n\n\n\n\n\n\n\n\n\nDefault ggplot2 scale with deuteranopia\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Mine Çetinkaya-Rundel, Sta313. Generated with {colorblindr}."
  },
  {
    "objectID": "slides/06/slides06.html#use-direct-labeling",
    "href": "slides/06/slides06.html#use-direct-labeling",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Use direct labeling",
    "text": "Use direct labeling\n\nPrefer direct labeling where color is used to display information over a legend\nQuicker to read\nEnsures graph can be understood without reliance on color"
  },
  {
    "objectID": "slides/06/slides06.html#without-direct-labeling",
    "href": "slides/06/slides06.html#without-direct-labeling",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Without direct labeling",
    "text": "Without direct labeling\n\n\nDefault ggplot2 scale\n\n\n\n\n\n\n\n\n\n\nDefault ggplot2 scale with deuteranopia\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Mine Çetinkaya-Rundel, Sta313. Generated with {colorblindr}."
  },
  {
    "objectID": "slides/06/slides06.html#with-direct-labeling",
    "href": "slides/06/slides06.html#with-direct-labeling",
    "title": "(Closer to) Accessible Data Viz",
    "section": "With direct labeling",
    "text": "With direct labeling\n\n\nDefault ggplot2 scale\n\n\n\n\n\n\n\n\n\n\nDefault ggplot2 scale with deuteranopia\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Mine Çetinkaya-Rundel, Sta313. Generated with {colorblindr}."
  },
  {
    "objectID": "slides/06/slides06.html#use-whitespace-or-pattern-to-separate-elements",
    "href": "slides/06/slides06.html#use-whitespace-or-pattern-to-separate-elements",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Use whitespace or pattern to separate elements",
    "text": "Use whitespace or pattern to separate elements\n\nSeparate elements with whitespace or pattern\nAllows for distinguishing between data without entirely relying on contrast between colors"
  },
  {
    "objectID": "slides/06/slides06.html#without-whitespace",
    "href": "slides/06/slides06.html#without-whitespace",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Without whitespace",
    "text": "Without whitespace\n\n\nDefault ggplot2 scale\n\n\n\n\n\n\n\n\n\n\nDefault ggplot2 scale with tritanopia\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Mine Çetinkaya-Rundel, Sta313. Generated with {colorblindr}."
  },
  {
    "objectID": "slides/06/slides06.html#with-whitespace",
    "href": "slides/06/slides06.html#with-whitespace",
    "title": "(Closer to) Accessible Data Viz",
    "section": "With whitespace",
    "text": "With whitespace\n\n\nDefault ggplot2 scale\n\n\n\n\n\n\n\n\n\n\nDefault ggplot2 scale with tritanopia\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Mine Çetinkaya-Rundel, Sta313. Generated with {colorblindr}."
  },
  {
    "objectID": "slides/06/slides06.html#alternative-text",
    "href": "slides/06/slides06.html#alternative-text",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Alternative text",
    "text": "Alternative text\n\nIt is read by screen readers in place of images allowing the content and function of the image to be accessible to those with visual or certain cognitive disabilities.\nIt is displayed in place of the image in browsers if the image file is not loaded or when the user has chosen not to view images.\nIt provides a semantic meaning and description to images which can be read by search engines or be used to later determine the content of the image from page context alone.\n\n\n\nSource: WebAIM"
  },
  {
    "objectID": "slides/06/slides06.html#alt-and-surrounding-text",
    "href": "slides/06/slides06.html#alt-and-surrounding-text",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Alt and surrounding text",
    "text": "Alt and surrounding text\nCHART TYPE of TYPE OF DATA where REASON FOR INCLUDING CHART\n(plus link to data source somewhere in the text)\n\nCHART TYPE: It’s helpful for people with partial sight to know what chart type it is and gives context for understanding the rest of the visual.\nTYPE OF DATA: What data is included in the chart? The x and y axis labels may help you figure this out.\nREASON FOR INCLUDING CHART: Think about why you’re including this visual. What does it show that’s meaningful. There should be a point to every visual and you should tell people what to look for.\nLink to data source: Don’t include this in your alt text, but it should be included somewhere in the surrounding text.\n\n\n\nSource: Writing Alt Text for Data Visualization"
  },
  {
    "objectID": "slides/06/slides06.html#alt-text-practice",
    "href": "slides/06/slides06.html#alt-text-practice",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Alt Text Practice",
    "text": "Alt Text Practice\nCHART TYPE of TYPE OF DATA where REASON FOR INCLUDING CHART\n\n\n\n\n\n\n\n\n\n\n\n\n\nA scatterplot\nof median hourly wage of RN’s by year in California, Minnesota, and New York. The x-axis starts at the year 1996 and ends at the year 2020.\nThe three states follow the same linear increasing trend until about 2007, when New York and Minnesota begin to flatten.\n\n\n\n\n\n−+\n01:30"
  },
  {
    "objectID": "slides/06/slides06.html#section-5",
    "href": "slides/06/slides06.html#section-5",
    "title": "(Closer to) Accessible Data Viz",
    "section": "",
    "text": "Accessible Visualization via Natural Language Descriptions: A Four-Level Model of Semantic Content\nAlan Lundgard, MIT CSAIL\nArvind Satyanarayan, MIT CSAIL\nIEEE Transactions on Visualization & Computer Graphics (Proceedings of IEEE VIS), 2021\n\nTo demonstrate how our model can be applied to evaluate the effectiveness of visualization descriptions, we conduct a mixed-methods evaluation with 30 blind and 90 sighted readers, and find that these reader groups differ significantly on which semantic content they rank as most useful. Together, our model and findings suggest that access to meaningful information is strongly reader-specific, and that research in automatic visualization captioning should orient toward descriptions that more richly communicate overall trends and statistics, sensitive to reader preferences."
  },
  {
    "objectID": "slides/06/slides06.html#lets-try-it",
    "href": "slides/06/slides06.html#lets-try-it",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Let’s try it!",
    "text": "Let’s try it!\nCHART TYPE of TYPE OF DATA where REASON FOR INCLUDING CHART\n\n\nTake one graph and two blank cards\nWrite an alt text description of your graph on one of your blank cards.\n\nPlease label with your plot number!\n\nIn two’s or three’s, trade alt text descriptions only\nOn your second blank card, try to draw the graph based on the alt text provided.\nNow, look at the original graph. How’d you do?\nTape the original graphs, alt text, and hand drawn graphs up on the board and have a look around\n\n\n\n\n\n−+\n04:00"
  },
  {
    "objectID": "slides/06/slides06.html#recap",
    "href": "slides/06/slides06.html#recap",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Recap",
    "text": "Recap\n\nWhat was hard about writing alt text?\nLooking at the graphs, do you notice things that make it harder/easier to write alt text?\nWhat was hard about recreating from the alt text?"
  },
  {
    "objectID": "slides/06/slides06.html#adding-alt-text-to-plots",
    "href": "slides/06/slides06.html#adding-alt-text-to-plots",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Adding alt text to plots",
    "text": "Adding alt text to plots\nShort:\n\n```{r}\n#| fig-alt: Alt text goes here.\n\n# code for plot goes here\n```\n\n\nLonger:\n\n```{r}\n#| fig-alt: |\n#|   Longer alt text goes here. Make sure to add line breaks ~roughly\n#|   80 characters.\n\n# code for plot goes here\n```"
  },
  {
    "objectID": "slides/06/slides06.html#using-okabe-ito-palette",
    "href": "slides/06/slides06.html#using-okabe-ito-palette",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Using Okabe Ito palette",
    "text": "Using Okabe Ito palette\n\n\nnurses_subset |&gt;\n  ggplot(aes(x = year, y = hourly_wage_median, color = state)) +\n  geom_point(size = 2) +\n  ggthemes::scale_color_colorblind() +\n  scale_y_continuous(labels = scales::label_dollar()) +\n  labs(\n    x = \"Year\", y = \"Median hourly wage\", color = \"State\",\n    title = \"Median hourly wage of Registered Nurses\"\n  ) +\n  theme(\n    legend.position = c(0.15, 0.75),\n    legend.background = element_rect(fill = \"white\", color = \"white\")\n  )"
  },
  {
    "objectID": "slides/06/slides06.html#double-encoding-1",
    "href": "slides/06/slides06.html#double-encoding-1",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Double Encoding",
    "text": "Double Encoding\nUse both color and shape aesthetics\n\n\nnurses_subset |&gt;\n  ggplot(aes(x = year, y = hourly_wage_median, color = state, shape = state)) +\n  geom_point(size = 2) +\n  scale_y_continuous(labels = scales::label_dollar()) +\n  labs(\n    x = \"Year\", y = \"Median hourly wage\", color = \"State\", shape = \"State\",\n    title = \"Median hourly wage of Registered Nurses\"\n  ) +\n  theme(\n    legend.position = c(0.15, 0.75),\n    legend.background = element_rect(fill = \"white\", color = \"white\")\n    )"
  },
  {
    "objectID": "slides/06/slides06.html#direct-labeling",
    "href": "slides/06/slides06.html#direct-labeling",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Direct Labeling",
    "text": "Direct Labeling\nCould do “by hand” with annotate(). Alternatively, use geom_text()\n\n\nnurses_subset |&gt;\n  ggplot(aes(x = year, y = annual_salary_median, color = state)) +\n  geom_line(show.legend = FALSE, linewidth = 2) +\n  geom_text(\n    data = nurses_subset |&gt; filter(year == max(year)),\n    aes(label = state), hjust = 0, nudge_x = 1,\n    show.legend = FALSE, size = 6\n  ) +\n  scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = \"K\")) +\n  labs(\n    x = \"Year\", y = \"Annual median salary\", color = \"State\",\n    title = \"Annual median salary of Registered Nurses\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    plot.margin = margin(0.1, 0.9, 0.1, 0.1, \"in\")\n    )"
  },
  {
    "objectID": "slides/06/slides06.html#direct-labeling-1",
    "href": "slides/06/slides06.html#direct-labeling-1",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Direct Labeling",
    "text": "Direct Labeling\nFirst, filter the data to include the endpoints only. Use the label aesthetic to map to the label in your data (in this case, state). geom_label by default will use the x and y aesthetics defined in ggplot()\n\n\nnurses_subset |&gt;\n  ggplot(aes(x = year, y = annual_salary_median, color = state)) +\n  geom_line(show.legend = FALSE, linewidth = 2) +\n  geom_text(\n    data = nurses_subset |&gt; filter(year == max(year)),\n    aes(label = state)\n  ) +\n  scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = \"K\")) +\n  labs(\n    x = \"Year\", y = \"Annual median salary\", color = \"State\",\n    title = \"Annual median salary of Registered Nurses\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    plot.margin = margin(0.1, 0.9, 0.1, 0.1, \"in\")\n    )"
  },
  {
    "objectID": "slides/06/slides06.html#direct-labeling-2",
    "href": "slides/06/slides06.html#direct-labeling-2",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Direct Labeling",
    "text": "Direct Labeling\n(Here’s what it looks like if we don’t filter to the endpoints)\n\n\nnurses_subset |&gt;\n  ggplot(aes(x = year, y = annual_salary_median, color = state)) +\n  geom_line(show.legend = FALSE, linewidth = 2) +\n  geom_text(\n    aes(label = state)\n  ) +\n  scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = \"K\")) +\n  labs(\n    x = \"Year\", y = \"Annual median salary\", color = \"State\",\n    title = \"Annual median salary of Registered Nurses\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    plot.margin = margin(0.1, 0.9, 0.1, 0.1, \"in\")\n    )"
  },
  {
    "objectID": "slides/06/slides06.html#direct-labeling-3",
    "href": "slides/06/slides06.html#direct-labeling-3",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Direct Labeling",
    "text": "Direct Labeling\nhjust=0 means “left justified”, or make the label start at the x-y coordinate you gave it. size = 6 makes the label bigger\n\n\nnurses_subset |&gt;\n  ggplot(aes(x = year, y = annual_salary_median, color = state)) +\n  geom_line(show.legend = FALSE, linewidth = 2) +\n  geom_text(\n    data = nurses_subset |&gt; filter(year == max(year)),\n    aes(label = state), \n    hjust = 0, \n    size = 6\n  ) +\n  scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = \"K\")) +\n  labs(\n    x = \"Year\", y = \"Annual median salary\", color = \"State\",\n    title = \"Annual median salary of Registered Nurses\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    plot.margin = margin(0.1, 0.9, 0.1, 0.1, \"in\")\n    )"
  },
  {
    "objectID": "slides/06/slides06.html#direct-labeling-4",
    "href": "slides/06/slides06.html#direct-labeling-4",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Direct Labeling",
    "text": "Direct Labeling\nnudge_x = 1 “nudges” each label one unit in the x-direction (so each label is a small distance away from what it’s labeling). show.legend=FALSE tells ggplot not to include the aesthetics for geom_text in the legend\n\n\nnurses_subset |&gt;\n  ggplot(aes(x = year, y = annual_salary_median, color = state)) +\n  geom_line(show.legend = FALSE, linewidth = 2) +\n  geom_text(\n    data = nurses_subset |&gt; filter(year == max(year)),\n    aes(label = state), \n    hjust = 0, \n    size = 6,\n    nudge_x = 1,\n    show.legend = FALSE,\n  ) +\n  scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = \"K\")) +\n  labs(\n    x = \"Year\", y = \"Annual median salary\", color = \"State\",\n    title = \"Annual median salary of Registered Nurses\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    plot.margin = margin(0.1, 0.9, 0.1, 0.1, \"in\")\n    )"
  },
  {
    "objectID": "slides/06/slides06.html#direct-labeling-5",
    "href": "slides/06/slides06.html#direct-labeling-5",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Direct Labeling",
    "text": "Direct Labeling\nFinally, we have to tell ggplot not to trim the plot, and leave room in the right margin for the labels themselves\n\n\nnurses_subset |&gt;\n  ggplot(aes(x = year, y = annual_salary_median, color = state)) +\n  geom_line(show.legend = FALSE, linewidth = 2) +\n  geom_text(\n    data = nurses_subset |&gt; filter(year == max(year)),\n    aes(label = state), \n    hjust = 0, \n    size = 6,\n    nudge_x = 1,\n    show.legend = FALSE,\n  ) +\n  scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = \"K\")) +\n  labs(\n    x = \"Year\", y = \"Annual median salary\", color = \"State\",\n    title = \"Annual median salary of Registered Nurses\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    plot.margin = margin(0.1, 0.9, 0.1, 0.1, \"in\")\n    )"
  },
  {
    "objectID": "slides/06/slides06.html#add-whitespace",
    "href": "slides/06/slides06.html#add-whitespace",
    "title": "(Closer to) Accessible Data Viz",
    "section": "Add whitespace",
    "text": "Add whitespace\nSet the color aesthetic to white\n\n\nnurses_subset |&gt;\n  filter(year %in% c(2000, 2010, 2020)) |&gt;\n  ggplot(aes(x = factor(year), y = total_employed_rn, fill = state)) +\n  geom_col(position = \"fill\", color = \"white\", linewidth = 1) +\n  labs(\n    x = \"Year\", y = \"Proportion of Registered Nurses\", fill = \"State\",\n    title = \"Total employed Registered Nurses\"\n  )"
  }
]